#!/usr/bin/env python

# Copyright (c) 2011, 2015 by Eugene Ciurana (pr3d4t0r)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions, the URL http://eugeneciurana.com/ipwhere,
#       and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions, the URL http://eugeneciurana.com/ipwhere,
#       and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
#     * Neither the name Eugene Ciurana, nor pr3d4t0r, nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY EUGENE CIURANA ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL EUGENE CIURANA BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# CONTRIBUTOR           EMAIL                         IRC /NICK
# ----------            -----                         ---------
# Eugene Ciurana        ipwhere AT ciurana.eu         pr3d4t0r
# Daniel Stenberg       daniel AT haxx.se

import json
import os
import socket
import sys
import urllib2


# *** Symbolic constants ***

IPWHERE_API_KEY = os.getenv(u'IPWHERE_API_KEY')
IPWHERE_HTTP_OK = 200 # HTTP OK
IPWHERE_INVALID = 999 # Something wrong with the URI request

IPWHERE_VERSION = u'1.2'
IPWHERE_UA      = u'ipwhere/'+IPWHERE_VERSION+' ('+sys.platform+')'

# IPInfoDB API URI:
IPINFODB_URI=u'http://api.ipinfodb.com/v3/ip-city/'


# *** Implementation ***

def helpUser():
  print(u'Invalid arguments list - syntax:')
  print(u'ipwhere ip.add.re.ss\n')
  print(u'ip.add.re.ss is an octet-format IPv4 address.  It may also be a host name.')

  if IPWHERE_API_KEY is None:
    print(u'\nThe required IPWHERE_API_KEY environment variable is not defined.')
    print(u'Get a free API key from http://www.ipinfodb.com/ip_location_api_json.php')

  exit(1)


def fetchLocationData(address = None):
    request = u'%s?key=%s&ip=%s&format=json' % (IPINFODB_URI, IPWHERE_API_KEY, address)

    try:
        input   = urllib2.urlopen(request)
        payload = input.read()
        status  = input.code
        input.close()
    except Exception as e:
        print("request = %s" % request)
        payload = None

        if e.code:
            status = e.code
        else:
            status = IPWHERE_INVALID
  
    return status, payload


def reverseDNSOf(location):
    try:
        hostInfo = socket.gethostbyaddr(location)
    except Exception as e:
        hostInfo = ((u'rDNS failed = %s' % e), None, None)

    return hostInfo[0]


def displayResultsIn(rawLocationData):
    locationData = json.loads(rawLocationData)

    print(u'%s - %s (%s) is in %s, %s, %s' % (
        sys.argv[1],
        locationData[u'ipAddress'],
        reverseDNSOf(locationData[u'ipAddress']),
        locationData[u'cityName'],
        locationData[u'regionName'],
        locationData[u'countryCode'] ))


def displayErrorIn(rawLocationData, status):
    if rawLocationData is not None:
        locationData = json.loads(rawLocationData)
        print(u'error processing your request - HTTP response = %d, %s' % (status, locationData[u'statusMessage']))
    else:
        print(u'error processing your request - HTTP response = %d' % status)


def _main():
    if len(sys.argv) < 2 or IPWHERE_API_KEY is None:
      helpUser()

    status, rawLocationData = fetchLocationData(sys.argv[1])

    if status is IPWHERE_HTTP_OK:
        displayResultsIn(rawLocationData)
    else:
        displayErrorIn(rawLocationData, status)
        if status == IPWHERE_INVALID:
            helpUser()


# *** main ***

if __name__ == u'__main__':
  try:
    _main()
  except KeyboardInterrupt:
    pass

