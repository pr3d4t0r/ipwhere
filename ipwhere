#!/usr/bin/env python

# Copyright (c) 2011, Eugene Ciurana (pr3d4t0r)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions, the URL http://eugeneciurana.com/ipwhere,
#       and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions, the URL http://eugeneciurana.com/ipwhere,
#       and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
#     * Neither the name Eugene Ciurana, nor pr3d4t0r, nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY EUGENE CIURANA ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL EUGENE CIURANA BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# CONTRIBUTOR           EMAIL                         IRC /NICK
# ----------            -----                         ---------
# Eugene Ciurana        ipwhere AT ciurana.eu         pr3d4t0r
# Daniel Stenberg       daniel AT haxx.se


import ConfigParser
import os.path
import urllib
import urllib2
import socket
import sys


# *** Symbolic constants ***

IPWHERE_HTTP_OK = 200 # HTTP OK
IPWHERE_INVALID = 999 # Something wrong with the URI request
IPWHERE_VERSION = '1.0'
IPWHERE_UA      = 'ipwhere/'+IPWHERE_VERSION+' ('+sys.platform+')'

# Geobytes API URI:
GEOBYTES_API          = 'http://www.geobytes.com/IpLocator.htm?'
GEOBYTES_TAG_NAME     = 0x01
GEOBYTES_TAG_VALUE    = 0X03


# *** Implementation ***

def helpUser():
  print('Invalid arguments list - syntax:')
  print('ipwhere ip.add.re.ss\n')
  print('ip.add.re.ss is an octet-format IPv4 address.  It may also be a host name.')
  exit(0x01)


# This method uses urllib2 for Jython compatibility.

def fetchLocationData(address = None):
  argList = 'GetLocation&'+urllib.urlencode(
      { 'template'    : 'php3.txt',
        'IpAddress'   : address })

  try:
    request = urllib2.Request(GEOBYTES_API, argList, { 'User-Agent': IPWHERE_UA })
    input   = urllib2.urlopen(request)
    payload = input.read()
    nStatus = input.code
    input.close()
  except:
    nStatus = IPWHERE_INVALID
    payload = None

  return nStatus, payload


def convertToTags(rawData, address):
  lines = [ line for line in rawData.split('\n') if 'meta' in line ]
  data  = [ data.split('"') for data in lines ]
  tags  = dict()

  tags['address'] = address

  for datum in data:
    tags[datum[GEOBYTES_TAG_NAME]] = datum[GEOBYTES_TAG_VALUE]

  try:
    tags['rdns'] = socket.gethostbyaddr(address)[0x00]
  except:
    tags['rdns'] = address

  return tags


def validateTags():
  if tags['known'] != 'true':
    print('Invalid request; bad IP address or host name?')
    exit(0x02)


def displayResults():
  if tags['city'] != 'Limit Exceeded':
    print(tags['address']+' - '+tags['rdns']+' is in '+tags['city']+', '+tags['regioncode']+', '+tags['iso2']+' ['+tags['certainty']+'%]')
  else:
    print('More than 20 requests made this hour - try again later (fall back to local cache?)')
    exit(0x03)


def _main():
  global tags

  if len(sys.argv) < 0x02:
    helpUser()

  nStatus, rawLocationData = fetchLocationData(sys.argv[0x01])

  if nStatus is IPWHERE_HTTP_OK:
    tags = convertToTags(rawLocationData, sys.argv[0x01])

    validateTags()
    displayResults()

  else:
    print('Error processing your request - HTTP response = %d' % nStatus)
    helpUser()


# *** main ***

if __name__ == '__main__':
  try:
    _main()
  except KeyboardInterrupt:
    pass

